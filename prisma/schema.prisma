// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  // url      = env("DIRECT_URL")
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  posts         Post[]
  comments      Comment[]
  hammers       Hammer[]

  @@map("users")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  hammerCount Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author      User       @relation(fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  categoryIds String[]   @db.ObjectId
  comments    Comment[]
  hammers     Hammer[]

  @@map("posts")
}



model Category {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  posts   Post[]   @relation(fields: [postIds], references: [id])
  postIds String[] @db.ObjectId

  @@map("categories")
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  @@map("comments")
}

model Hammer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  Post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId

  @@unique([userId, postId])
  @@map("hammers")
}
